@using JuicyBurger.Services.GlobalConstants
@using JuicyBurger.Web.ViewModels.Products
@using System.Text.RegularExpressions
@model List<ProductViewModel>

@{
    ViewData["Title"] = "All";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container">

    <!-- Page Heading/Breadcrumbs -->
    <h1 class="main-content-icons-text text-center mt-3 mb-0 bg-light py-3">
        OUR BURGERS
    </h1>

    <div class="row">
        <div class="col-md-4">
            <!-- Search Widget -->
            <div class="card mb-4">
                <h5 class="card-header main-content-icons-text bg-dark text-white">SEARCH</h5>
                <div id="search-bar" class="card-body">
                    <form method="get" asp-controller="Products" asp-action="Search">
                        <div class="input-group">
                            <input id="search-bar" type="text" class="form-control" name="searchString" placeholder="Search for...">
                            <span class="input-group-btn">
                                <button class="btn btn-secondary main-content-icons-text bg-dark" type="submit">Go!</button>
                            </span>
                        </div>
                    </form>
                </div>
            </div>
            <!-- Categories Widget -->
            <div class="card my-4">
                <h5 class="card-header main-content-icons-text bg-dark text-white">MENU</h5>
                <div class="card-body ">
                    <div>
                        <ul class="list-group">
                            @foreach (var types in (IEnumerable<ProductTypeViewModel>)this.ViewData[ServicesGlobalConstants.ProductTypesMenuViewData])
                            {
                                <li class="mb-1">
                                    <a class="list-group-item main-content-icons-text bg-dark text-white" href="/Products/All/@types.Id/?page=1">@types.Name</a>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
            <!-- Side Widget -->
            <div class="card my-4">
                <h5 class="card-header bg-dark text-white">Side Widget</h5>
                <div class="card-body">
                    You can put anything you want inside of these side widgets. They are easy to use, and feature the new Bootstrap 4 card containers!
                </div>
            </div>
        </div>
        <div class="product-card col-md-8">
            <!-- Blog Post -->

            @{

                @for (int j = 0; j < Model.Count; j++)
                {
                    <div class="product-card mb-4">
                        <img class="card-img-top" src="@Model[j].Image" alt="Card image cap">
                        <div class="card-body">
                            <h2 class="product-name main-content-icons-text">@Model[j].Name</h2>
                            <h3 class="card-title main-content-icons-text">&#36; @Model[j].Price.ToString(ServicesGlobalConstants.PriceRouting)</h3>
                            <p class="card-text card-title main-content-icons-text">@Model[j].Description</p>
                            <a href="/Products/Details/@Model[j].Id" class="btn main-content-icons-text btn-dark">Details &rarr;</a>
                        </div>
                        <div class="card-footer text-muted">
                            ★ ★ ★ ★ ☆
                        </div>
                    </div>

                }

                var queryString = Context.Request.QueryString.Value;
                var page = string.Empty;
                var pager = new Pager(Model.Count);

                if (!string.IsNullOrEmpty(queryString))
                {
                    page = Regex.Match(queryString, @"\d+").Value;
                    pager = new Pager(Model.Count, int.Parse(page));
                }

                <nav class="col d-flex justify-content-center mb-5" aria-label="Page navigation example">
                    <ul class="pagination border-dark">

                        @for (var i = pager.FirstPage; i <= pager.Lastpage; i++)
                        {
                            if (i == int.Parse(page))
                            {
                                <li class="page-item active ">
                                    <a class="page-link bg-dark border-dark" href="~/Products/All/@this.ViewData["currentMenuCategory"]/?page=@i">@i</a>
                                </li>
                            }
                            else
                            {
                                <li class="page-item">
                                    <a class="page-link bg-white border-dark text-dark" href="~/Products/All/@this.ViewData["currentMenuCategory"]/?page=@i">@i</a>
                                </li>
                            }
                        }   
                    </ul>
                </nav>
            }
        </div>
    </div>
</div>
